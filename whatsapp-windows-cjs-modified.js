// Importando a biblioteca whatsapp-web.js usando CommonJS
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');

// Criando o cliente WhatsApp com salvar sess√£o
const client = new Client({
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--disable-gpu'
        ]
    },
    restartOnAuthFail: true,
    // Salva os dados da sess√£o para n√£o precisar escanear o QR code novamente
    authStrategy: new LocalAuth({
        clientId: "mobile-on-bot"
    })
});

console.log("WhatsApp Bot iniciando... Aguarde o QR Code para fazer login.");

// QR code generation for authentication
client.on('qr', qr => {
    qrcode.generate(qr, {small: true});
    console.log('QR Code gerado. Escaneie com o WhatsApp para fazer login.');
});

// Client ready event handler
client.on('ready', () => {
    console.log('WhatsApp Bot conectado! Mobile On est√° online.');
});

// Client authentication failure handler
client.on('auth_failure', msg => {
    console.error('Falha na autentica√ß√£o:', msg);
});

// Connection event handlers
client.on('disconnected', (reason) => {
    console.log('Cliente foi desconectado', reason);
});

// Initialize the WhatsApp client
client.initialize().catch(err => {
    console.error('Erro ao inicializar:', err);
});

// Handle connection errors
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

// Utility function for creating delays
const delay = ms => new Promise(res => setTimeout(res, ms));

// Estados de conversa
const userStates = {}; // Objeto para armazenar o estado de cada usu√°rio

// Constantes para os estados
const WAITING_FOR_OPTION = 'waiting_for_option';
const WAITING_FOR_YES_NO = 'waiting_for_yes_no';
const WAITING_FOR_PRODUCT_TYPE = 'waiting_for_product_type';
const WAITING_FOR_MODEL_INFO = 'waiting_for_model_info';
const WAITING_FOR_CAPINHA_MODEL = 'waiting_for_capinha_model';
const WAITING_FOR_FEEDBACK_TYPE = 'waiting_for_feedback_type';
const WAITING_FOR_RECLAMACAO = 'waiting_for_reclamacao';
const WAITING_FOR_SUGESTAO = 'waiting_for_sugestao';
const WAITING_FOR_FONE_TYPE = 'waiting_for_fone_type'; 
const WAITING_FOR_CABO_TYPE = 'waiting_for_cabo_type'; // Novo estado para submenu de cabos
const WAITING_FOR_CARREGADOR_TYPE = 'waiting_for_carregador_type'; // Novo estado para submenu de carregadores
const WAITING_FOR_RATING = 'waiting_for_rating'; // Novo estado para avalia√ß√£o do atendimento

// Fun√ß√£o para definir o estado do usu√°rio
function setUserState(userId, state) {
    userStates[userId] = state;
    console.log(`Estado do usu√°rio ${userId} alterado para: ${state}`);
}

// Fun√ß√£o para obter o estado do usu√°rio
function getUserState(userId) {
    return userStates[userId] || null;
}

// Mensagem de erro padr√£o para op√ß√µes inv√°lidas
const INVALID_OPTION_MESSAGE = "Desculpe, n√£o entendi sua mensagem. Para continuar, por favor selecione uma das op√ß√µes digitando o n√∫mero correspondente.";

// Fun√ß√£o para enviar mensagem de erro de op√ß√£o inv√°lida
async function sendInvalidOptionMessage(msg) {
    await client.sendMessage(msg.from, INVALID_OPTION_MESSAGE);
}

client.on('message', async msg => {
    try {
        console.log(`Mensagem recebida de ${msg.from}: "${msg.body}"`);
        console.log(`Estado atual do usu√°rio: ${getUserState(msg.from)}`);
        
        const chat = await msg.getChat();
        const currentState = getUserState(msg.from);
        
        // Processamento baseado no estado do usu√°rio
        switch (currentState) {
            case WAITING_FOR_RATING:
                const rating = parseInt(msg.body.trim());
                
                if (isNaN(rating) || rating < 1 || rating > 5) {
                    await client.sendMessage(msg.from, 'Por favor, avalie nosso atendimento com uma nota de 1 a 5, onde 1 √© muito ruim e 5 √© excelente.');
                    return;
                }
                
                await delay(1000);
                await chat.sendStateTyping();
                await delay(1000);
                
                // Respostas personalizadas baseadas na nota
                if (rating <= 2) {
                    // Notas baixas - resposta mais apolog√©tica
                    await client.sendMessage(msg.from, `Agradecemos sua avalia√ß√£o de *${rating}/5*. Sentimos muito que sua experi√™ncia n√£o tenha sido satisfat√≥ria. Vamos trabalhar para melhorar nosso atendimento. Sua opini√£o √© muito importante para n√≥s! üôè`);
                } else if (rating === 3) {
                    // Nota m√©dia - resposta neutra
                    await client.sendMessage(msg.from, `Obrigado pela sua avalia√ß√£o de *${rating}/5*. Estamos sempre buscando melhorar nosso atendimento. Se tiver sugest√µes espec√≠ficas, ficaremos felizes em ouvi-las em um pr√≥ximo contato! üòä`);
                } else {
                    // Notas altas - resposta entusiasmada
                    await client.sendMessage(msg.from, `Muito obrigado pela avalia√ß√£o de *${rating}/5*! Ficamos felizes em saber que conseguimos atender suas expectativas. Esperamos v√™-lo novamente em breve! üåü`);
                }
                
                await delay(1000);
                await chat.sendStateTyping();
                await delay(1000);
                await client.sendMessage(msg.from, 'At√© logo! üëã');
                
                delete userStates[msg.from]; // Remove o estado do usu√°rio
                return;
                
            case WAITING_FOR_CARREGADOR_TYPE: // Submenu de tipos de carregadores
                const carregadorType = msg.body.trim();
                let carregadorResponse = '';
                
                switch(carregadorType) {
                    case '1':
                        carregadorResponse = 'Carregador Tipo C';
                        break;
                    case '2':
                        carregadorResponse = 'Carregador Lightning/iPhone';
                        break;
                    case '3':
                        carregadorResponse = 'Carregador Micro V8';
                        break;
                    default:
                        await sendInvalidOptionMessage(msg);
                        await client.sendMessage(msg.from, 'Por favor, escolha uma op√ß√£o v√°lida de 1 a 3.');
                        return;
                }
                
                await delay(1000);
                await chat.sendStateTyping();
                await delay(1000);
                await client.sendMessage(msg.from, `Voc√™ escolheu *${carregadorResponse}*, aguarde que em breve enviaremos as fotos e pre√ßos dispon√≠veis.`);
                
                setUserState(msg.from, WAITING_FOR_YES_NO);
                await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                return;
                
            case WAITING_FOR_CABO_TYPE: // Submenu de tipos de cabos
                const caboType = msg.body.trim();
                let caboResponse = '';
                
                switch(caboType) {
                    case '1':
                        caboResponse = 'Cabo Tipo C';
                        break;
                    case '2':
                        caboResponse = 'Cabo Lightning/iPhone';
                        break;
                    case '3':
                        caboResponse = 'Cabo Micro V8';
                        break;
                    default:
                        await sendInvalidOptionMessage(msg);
                        await client.sendMessage(msg.from, 'Por favor, escolha uma op√ß√£o v√°lida de 1 a 3.');
                        return;
                }
                
                await delay(1000);
                await chat.sendStateTyping();
                await delay(1000);
                await client.sendMessage(msg.from, `Voc√™ escolheu *${caboResponse}*, aguarde que em breve enviaremos as fotos e pre√ßos dispon√≠veis.`);
                
                setUserState(msg.from, WAITING_FOR_YES_NO);
                await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                return;
                
            case WAITING_FOR_FONE_TYPE: // Submenu de tipos de fone
                const foneType = msg.body.trim();
                let foneResponse = '';
                
                switch(foneType) {
                    case '1':
                        foneResponse = 'Fone com fio';
                        break;
                    case '2':
                        foneResponse = 'Fone de ouvido bluetooth';
                        break;
                    case '3':
                        foneResponse = 'Headphone bluetooth';
                        break;
                    case '4':
                        foneResponse = 'Headset gamer';
                        break;
                    default:
                        await sendInvalidOptionMessage(msg);
                        await client.sendMessage(msg.from, 'Por favor, escolha uma op√ß√£o v√°lida de 1 a 4.');
                        return;
                }
                
                await delay(1000);
                await chat.sendStateTyping();
                await delay(1000);
                await client.sendMessage(msg.from, `Voc√™ escolheu *${foneResponse}*, aguarde que em breve enviaremos as fotos e pre√ßos dispon√≠veis.`);
                
                setUserState(msg.from, WAITING_FOR_YES_NO);
                await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                return;
                
            case WAITING_FOR_CAPINHA_MODEL:
                const modeloCapinha = msg.body.trim();
                
                if (modeloCapinha.length > 0) {
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, `Obrigado por informar o modelo *${modeloCapinha}*! Em breve enviaremos as fotos e pre√ßos das capinhas dispon√≠veis para este aparelho.`);
                    
                    setUserState(msg.from, WAITING_FOR_YES_NO);
                    await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                }
                return;
                
            case WAITING_FOR_RECLAMACAO:
                const reclamacao = msg.body.trim();
                
                if (reclamacao.length > 0) {
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, "Sentimos muito pelo ocorrido. Vamos encaminhar sua reclama√ß√£o para o setor respons√°vel e faremos o poss√≠vel para resolver o quanto antes. Obrigado por nos avisar. üôè");
                    
                    setUserState(msg.from, WAITING_FOR_YES_NO);
                    await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                }
                return;
                
            case WAITING_FOR_SUGESTAO:
                const sugestao = msg.body.trim();
                
                if (sugestao.length > 0) {
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, "Agradecemos muito por compartilhar sua ideia! √â esse tipo de feedback que nos ajuda a melhorar cada vez mais. üòä‚ú®");
                    
                    setUserState(msg.from, WAITING_FOR_YES_NO);
                    await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                }
                return;
                
            case WAITING_FOR_FEEDBACK_TYPE:
                const escolhaFeedback = msg.body.trim();
                
                switch(escolhaFeedback) {
                    case '1': // Reclama√ß√£o
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, "Poxa, sentimos muito pelo que aconteceu üòî Conta pra gente o que houve ‚Äì queremos resolver rapidinho üí® e garantir que voc√™ tenha a melhor experi√™ncia poss√≠vel com a gente üíõ.");
                        setUserState(msg.from, WAITING_FOR_RECLAMACAO);
                        break;
                        
                    case '2': // Sugest√£o
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, "Adoramos ouvir ideias novas! Se voc√™ tem alguma sugest√£o ou melhoria, conta pra gente ‚Äî sua opini√£o faz toda a diferen√ßa üí¨‚ú®");
                        setUserState(msg.from, WAITING_FOR_SUGESTAO);
                        break;
                        
                    default:
                        await sendInvalidOptionMessage(msg);
                        await client.sendMessage(msg.from, "Por favor, escolha uma op√ß√£o v√°lida: 1 para Reclama√ß√£o ou 2 para Sugest√£o.");
                        break;
                }
                return;
                
            case WAITING_FOR_MODEL_INFO:
                const userMessage = msg.body.trim();
                const promptMessage = '‚ö†Ô∏è Informamos que *n√£o* aceitamos aparelhos usados como forma de pagamento. Trabalhamos apenas com aparelhos novos, lacrados e com 1 ano de garantia.\n\nPara continuarmos, por favor nos diga o modelo que voc√™ procura. Exemplos: iPhone 13 128gb, iphone 12 64gb...';
                
                if (userMessage === '' || userMessage === promptMessage) {
                    await client.sendMessage(msg.from, 'Pra gente seguir certinho, me diz qual √© o modelo que voc√™ est√° procurando, por favor üòä (ex: iPhone 11 64gb, Samsung A54, Moto G73...)');
                    return;
                }
                
                console.log(`Usu√°rio informou modelo: *${userMessage}*`);
                
                await delay(1000);
                await chat.sendStateTyping();
                await delay(1000);
                await client.sendMessage(msg.from, `Obrigado pelo interesse no modelo *${userMessage}*! üì±`);
                
                await delay(1000);
                await chat.sendStateTyping();
                await delay(1000);
                await client.sendMessage(msg.from, '‚ú® Aguarde s√≥ um pouquinho! Um de nossos atendentes vai falar com voc√™ em breve para te ajudar no que for preciso üòä');
                
                setUserState(msg.from, WAITING_FOR_YES_NO);
                await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                return;
                
            case WAITING_FOR_PRODUCT_TYPE:
                const productType = msg.body.trim();
                
                if (productType === '3') { // Cabos
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, 'üîå Qual tipo de cabo voc√™ precisa?\n\n1 - Tipo C üîå\n2 - Lightning/iPhone üîå\n3 - Micro V8 üîå');
                    setUserState(msg.from, WAITING_FOR_CABO_TYPE);
                    return;
                }
                
                switch(productType) {
                    case '1': // Capinhas
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, '*üì± Para te enviar as op√ß√µes de capinhas, nos informe o modelo do seu aparelho:*\nExemplo: iPhone 15, Samsung A32, Motorola G8 Plus...\n\nAssim conseguimos te mostrar as melhores op√ß√µes dispon√≠veis!');
                        setUserState(msg.from, WAITING_FOR_CAPINHA_MODEL);
                        break;
                        
                    case '2': // Fones
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'üéß Qual tipo de fone voc√™ voc√™ precisa?\n\n1 - Fone com fio üéß\n2 - Fone de ouvido bluetooth üéß\n3 - Headphone bluetooth üéß\n4 - Headset gamer üéÆ');
                        setUserState(msg.from, WAITING_FOR_FONE_TYPE);
                        break;
                        
                    case '4': // Carregadores
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'üîã Qual tipo de carregador voc√™ voc√™ precisa?\n\n1 - Tipo C üîã\n2 - Lightning/iPhone üîã\n3 - Micro V8 üîã');
                        setUserState(msg.from, WAITING_FOR_CARREGADOR_TYPE);
                        break;
                        
                    case '5': // Caixa de Som
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'üîä Voc√™ escolheu uma *caixa de som*! Para mais detalhes, *clique abaixo* e fale com um de nossos atendentes:');
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'Falar com atendente: https://ig.me/m/mobileon_');
                        setUserState(msg.from, WAITING_FOR_YES_NO);
                        await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                        break;
                        
                    case '6': // Outros
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'Voc√™ escolheu *Outros*! Para mais informa√ß√µes,*clique abaixo* e fale com um de nossos atendentes:');
                        await delay(1000);
                        await chat.sendStateTyping();
                        await delay(1000);
                        await client.sendMessage(msg.from, 'Falar com atendente: https://ig.me/m/mobileon_');
                        setUserState(msg.from, WAITING_FOR_YES_NO);
                        await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                        break;
                        
                    default:
                        await sendInvalidOptionMessage(msg);
                        await client.sendMessage(msg.from, 'Por favor, escolha uma op√ß√£o v√°lida de 1 a 6.');
                        return;
                }
                return;
                
            case WAITING_FOR_YES_NO:
                const answer = msg.body.toLowerCase();
                
                if (answer === 'yes' || answer === 'sim' || answer === 'Sim' || answer === 'Quero' || answer === 'quero') {
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, 'Por favor, digite uma das op√ß√µes abaixo:\n\n1 - Trocas e Devolu√ß√µes üîÑ\n2 - Fotos de Produtos üì∑\n3 - Pre√ßos de iphones üì±\n4 - H√≥rario de funcionamento üïò\n5 - Reclama√ß√µes e Sugest√µes üó£Ô∏è\n6 - Outros Assuntos üìù\n7 - Acesso VIP com Descontos Exclusivos üíé');
                    setUserState(msg.from, WAITING_FOR_OPTION);
                } else if (answer === 'no' || answer === 'n√£o' || answer === 'nao'|| answer === 'Nao'|| answer === 'N√£o') {
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    // Em vez de encerrar, pede uma avalia√ß√£o
                    await client.sendMessage(msg.from, '‚≠ê *Antes de finalizarmos*, gostar√≠amos de saber sua opini√£o: como voc√™ avaliaria nosso atendimento?\n\n*Por favor, avalie nosso atendimento de 1 a 5, onde:*\n\n1 - *Muito ruim*\n2 - *Ruim*\n3 - *Regular*\n4 - *Bom*\n5 - *Excelente*\n\nSua opini√£o √© muito importante para n√≥s! üòä');
                    setUserState(msg.from, WAITING_FOR_RATING);
                } else {
                    await client.sendMessage(msg.from, 'Por favor, responda com "sim" ou "nao".');
                }
                return;
        }
        
        // Processamento para mensagens iniciais ou em estado n√£o definido
        // Verificar se √© uma sauda√ß√£o
        if (msg.body.match(/(menu|Menu|dia|tarde|noite|oi|Oi|Ol√°|ol√°|ola|Ola|bom|Bom|Boa|boa|Amigo|amigo|Amiga|amiga|Thiago|thiago|Tiago|tiago|Thi|thi|Ti|ti)/i) && msg.from.endsWith('@c.us')) {
            await delay(1000);
            await chat.sendStateTyping();
            await delay(1000);
            const contact = await msg.getContact();
            const name = contact.pushname || "Cliente";
            await client.sendMessage(msg.from,'Ol√°! '+ name.split(" ")[0] + ' Seja bem-vindo(a) √† *Mobile on* üòÄ\n\nSou o assistente virtual e estou aqui pra te ajuda! ü§ñ\n\nPor favor, digite uma das op√ß√µes abaixo:\n\n1 - Trocas e Devolu√ß√µes üîÑ\n2 - Fotos de Produtos üì∑\n3 - Pre√ßos de iphones üì±\n4 - H√≥rario de funcionamento üïò\n5 - Reclama√ß√µes e Sugest√µes üó£Ô∏è\n6 - Outros Assuntos üìù\n7 - Acesso VIP com Descontos Exclusivos üíé');
            setUserState(msg.from, WAITING_FOR_OPTION);
            return;
        }
        
        // Processamento das op√ß√µes do menu principal
        if (msg.from.endsWith('@c.us')) {
            switch(msg.body) {
                case '1': // Trocas e Devolu√ß√µes
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, '*Voc√™ pode trocar ou devolver seu produto em at√© 7 dias ap√≥s a compra!*.\nLembre-se de que o produto deve estar na embalagem original, com todos os acess√≥rios, o cupom de compra e sem sinais de uso.üì¶üîÑ\n\nPara mais informa√ß√µes ou para dar in√≠cio ao processo, *clique abaixo* e fale com um de nossos atendentes.üí¨üòä');
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, 'Falar com atendente: https://ig.me/m/mobileon_');
                    setUserState(msg.from, WAITING_FOR_YES_NO);
                    await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                    break;
                    
                case '2': // Fotos de Produtos
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, '*Que tipo de produto voc√™ est√° buscando?*\nEscolha uma das op√ß√µes abaixo para que possamos te ajudar melhor!üîç\n\n1 - Capinhas üì≤\n2 - Fones üéß\n3 - Cabos üîå\n4 - Carregadores üîã\n5 - Caixa de Som üìª\n6 - Outros üõí');
                    setUserState(msg.from, WAITING_FOR_PRODUCT_TYPE);
                    break;
                    
                case '3': // Pre√ßos de iPhones
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, '‚ö†Ô∏è Informamos que *n√£o* aceitamos aparelhos usados como forma de pagamento. Trabalhamos apenas com aparelhos novos, lacrados e com 1 ano de garantia.\n\nPara continuarmos, por favor nos diga o modelo que voc√™ procura. Exemplos: iPhone 13 128gb, iphone 12 64gb...');
                    setUserState(msg.from, WAITING_FOR_MODEL_INFO);
                    break;
                    
                case '4': // Hor√°rio de funcionamento
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, '*‚è∞ Hor√°rio de Funcionamento:*\n\nüìÖSegunda a S√°bado: 9h √†s 21h\nüìÖDomingo e Feriados: 9h √†s 15h\n\nüí¨Atendimento online tamb√©m dispon√≠vel via Instagram: @mobileon_');
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, 'Falar com atendente: https://ig.me/m/mobileon_');
                    setUserState(msg.from, WAITING_FOR_YES_NO);
                    await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                    break;
                    
                case '5': // Reclama√ß√µes e Sugest√µes
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, '*üì£ Gostar√≠amos de ouvir voc√™!*\nVoc√™ prefere registrar uma reclama√ß√£o ou enviar uma sugest√£o para melhorar nossos servi√ßos? üòä\n\n1 - Reclama√ß√£o üòî\n2 - Sugest√£o üí°');
                    setUserState(msg.from, WAITING_FOR_FEEDBACK_TYPE);
                    break;
                    
                case '6': // Outros Assuntos
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, 'Para outros assuntos, estamos √† disposi√ß√£o!\n\n*Clique abaixo* e entre em contato diretamente com um de nossos atendentes. Estamos prontos para ajudar voc√™! üòä');
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, 'Falar com atendente: https://ig.me/m/mobileon_');
                    setUserState(msg.from, WAITING_FOR_YES_NO);
                    await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                    break;
                    
                case '7': // Acesso VIP
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, 'üéâ VOC√ä ACABA DE DESBLOQUEAR O ACESSO AO NOSSO CANAL VIP! üíé\n\nEssa √© a sua chance de garantir ofertas secretas com descontos jamais vistos ‚Äì produtos com pre√ßos imperd√≠veis que n√£o s√£o divulgados em lugar nenhum!\n\n‚úÖ Totalmente GR√ÅTIS!\n‚úÖ Descontos exclusivos para membros VIP!\n‚úÖ Sem pegadinhas ‚Äì s√≥ precisa estar dentro do canal!\n‚úÖ Apenas informe o c√≥digo promocional exibido no canal no ato da compra!\n\nüö® Mas aten√ß√£o: as ofertas s√£o por tempo LIMITADO e com estoque reduzido.\n\nüîê *Clique abaixo* e entre agora no canal VIP para n√£o perder essas oportunidades √∫nicas:');
                    await delay(1000);
                    await chat.sendStateTyping();
                    await delay(1000);
                    await client.sendMessage(msg.from, 'https://whatsapp.com/channel/0029Vb5nvdo3QxS7BjAkBk1z');
                    setUserState(msg.from, WAITING_FOR_YES_NO);
                    await client.sendMessage(msg.from, 'Deseja retornar √†s op√ß√µes? (sim ou n√£o)');
                    break;
                    
                default:
                    await sendInvalidOptionMessage(msg);
                    await client.sendMessage(msg.from, 'Por favor, escolha uma op√ß√£o v√°lida de 1 a 7.');
                    return;
            }
        }
        
    } catch (error) {
        console.error('Erro ao processar mensagem:', error);
        try {
            await client.sendMessage(msg.from, 'üö® *Desculpe, houve um pequeno erro ao processar sua mensagem.*\nPor favor, tente novamente mais tarde. Se o problema persistir, n√£o hesite em entrar em contato com um de nossos atendentes! Agradecemos pela sua paci√™ncia. üòä');
        } catch (sendError) {
            console.error('Erro ao enviar mensagem de erro:', sendError);
        }
    }
    // Fun√ß√£o para manter o bot ativo no Railway
function keepAlive() {
    console.log('Bot ativo: ' + new Date().toISOString());
}
// A cada 10 minutos, registra atividade para manter o servi√ßo ativo
setInterval(keepAlive, 10 * 60 * 1000);
});